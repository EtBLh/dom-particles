{"version":3,"sources":["utilities.js","text_particle.js","text_particle_emitter.js","text_particle_manager.js","index.js"],"names":["RGB_PATTERN","RGBA_PATTERN","HEX_PATTERN","NUMBER_AND_UNIT_PATTERN","rgbToNumbers","string","exec","r","g","b","map","v","parseInt","err","console","warn","rgbaToNumbers","a","parseFloat","hexToNumbers","x","length","valueToNumberAndUnit","num","unit","tryGetValue","colourToCSSString","valueToCSSString","val","lerp","frac","easeArray","array","easeFn","total","start","Math","min","floor","end","transpose","_","i","propValueToFunction","propValue","k","s","values","k_t","c","DEFAULT_PARTICLE_OPTIONS","ttl","contents","style","display","zIndex","onCreate","onUpdate","onDestroy","heading","grid","TextParticle","options","Object","assign","velocity","y","position","acceleration","elapsed","frameNumber","getTransform","getGridTransform","setContents","updateStyle","nextProps","getSnapshot","element","propObject","fixedProps","dynamicProps","keys","propKey","Array","isArray","styleValue","html","innerHTML","text","innerText","cssText","obj","buildProps","snapshot","reduce","lifeFrac","transform","getScaledTransform","rotation","scale","scaleX","scaleY","skew","skewX","skewY","f","DEFAULT_EMITTER_OPTIONS","maxEmissions","emitEvery","particleOptions","MAX_EMIT_PER_STEP","TextParticleEmitter","manager","emitted","totalElapsed","toEmit","p","pp","v_angle","atan2","v_magna","sqrt","vv","cos","sin","addParticle","DEFAULT_TPM_OPTIONS","max","preallocate","tagName","autostart","TextParticleManager","container","document","querySelector","_pool","_particles","_emitters","foldElement","createElement","className","reservoirCSS","_allocate","appendChild","frameStart","_pop","push","raf","e","performance","now","requestAnimationFrame","_update","cancelAnimationFrame","setStyleText","_push","timestamp","dt","particlesToDestroy","filter","update","alive","emittersToDestroy","t","el","pop","_create","n","utilities","module","exports"],"mappings":"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","file":"DomParticles.map","sourceRoot":"../src","sourcesContent":["/* Useful regexes */\nconst RGB_PATTERN = /rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/;\nconst RGBA_PATTERN = /rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*([01](?:\\.\\d+)*)\\s*\\)/;\nconst HEX_PATTERN = /#([0-9a-f]{1,2})([0-9a-f]{1,2})([0-9a-f]{1,2})/;\nconst NUMBER_AND_UNIT_PATTERN = /(\\d+\\.\\d+|\\d+)([a-z]+)?/;\n\n/* CSS to internal format import / export */\n\nexport const rgbToNumbers = (string) => {\n  try {\n    let [_, r, g, b] = RGB_PATTERN.exec(string);\n    return [...[r, g, b].map(v => parseInt(v)), 1.0];\n  }\n  catch (err){\n    console.warn(`Invalid RGB value: ${string}`);\n    return false;\n  }\n}\n\nexport const rgbaToNumbers = (string) => {\n  try {\n    let [_, r, g, b, a] = RGBA_PATTERN.exec(string);\n    return [...[r, g, b].map(v => parseInt(v)), parseFloat(a)]\n  }\n  catch (err){\n    console.warn(`Invalid RGBA value: ${string}`);\n    return false;\n  }\n}\n\nexport const hexToNumbers = (string) => {\n  try {\n    let [_, r, g, b] = HEX_PATTERN.exec(string);\n    return [...[r, g, b].map(x => parseInt(x, 16) * ((x.length === 1) ? 0x11 : 0x1)), 1.0];\n  }\n  catch (err) {\n    console.warn(`Invalid hex value: ${string}`);\n    return false;\n  }\n}\n\nexport const valueToNumberAndUnit = (string) => {\n  try {\n    let [_, num, unit] = NUMBER_AND_UNIT_PATTERN.exec(string);\n    return [parseFloat(num), unit || '']\n  }\n  catch (err) {\n    console.warn(`Invalid CSS unit string: ${string}`);\n    return false;\n  }\n}\n\nexport const tryGetValue = (string) => {\n  switch(string[0]){\n    case '#':\n      return hexToNumbers(string);\n    case 'r':\n      return (string[3] === 'a' ? rgbaToNumbers : rgbToNumbers)(string);\n    default:\n      return valueToNumberAndUnit(string);\n  }\n}\n\nexport const colourToCSSString = ([r, g, b, a]) => `rgba(${r}, ${g}, ${b}, ${a})`;\nexport const valueToCSSString = (val, unit) => `${val}${unit}`;\n\n/* Easing functions */\n\nexport const lerp = (a, b, frac) => a + ((b - a) * frac);\n\nexport const easeArray = (array, easeFn, frac) => {\n  let total = frac * (array.length - 1);\n  let start = Math.min(Math.floor(total), array.length - 1);\n  let end = Math.min(start + 1, array.length - 1);\n  return easeFn(array[start], array[end], total % 1);\n}\n\n/* Property calculation function-generation functions */\n\nexport const transpose = (array) => {\n  return array[0].map((_, i) => array.map(r => r[i]));\n}\n\nexport const propValueToFunction = (propValue) => {\n  let k = propValue.map(s => tryGetValue(s));\n  if (k[0].length === 2){\n    // CSS unit property (either like '12px' or like '1.0'\n    let unit = k[0][1];\n    let values = k.map(v => v[0]);\n    return (frac) => valueToCSSString(easeArray(values, lerp, frac), unit)\n  } else {\n    // Colour in [[r, g, b, a],...] format\n    let k_t = transpose(k);\n    return (frac) => colourToCSSString(k_t.map(c => easeArray(c, lerp, frac)))\n  }\n}","import { propValueToFunction } from './utilities';\n\nexport const DEFAULT_PARTICLE_OPTIONS = {\n  ttl: 1000,\n  contents: '.',\n  style: { display: 'inline-block', zIndex: 1 },\n  onCreate: () => {},\n  onUpdate: () => {},\n  onDestroy: () => {},\n  heading: false,\n  grid: false,\n}\n\nexport default class TextParticle {\n  constructor (options) {\n    Object.assign(this, {\n      ...DEFAULT_PARTICLE_OPTIONS,\n      ...options,\n      velocity: { ...{ x: 0, y: 0 }, ...options.velocity },\n      position: { ...{ x: 0, y: 0 }, ...options.position },\n      acceleration: { ...{ x: 0, y: 0 }, ...options.acceleration },\n      style: { ...DEFAULT_PARTICLE_OPTIONS.style, ...options.style }\n    });\n\n    this.elapsed = 0;\n    this.frameNumber = 0;\n    this.getTransform = this.grid ? this.getGridTransform : this.getTransform;\n\n    this.setContents(this.contents);\n\n    this.updateStyle(this.style);\n    this.nextProps = this.getSnapshot();\n    this.onCreate(this);\n    Object.assign(this.element.style, this.nextProps);\n  }\n\n  get alive () {\n    return !this.ttl || this.elapsed < this.ttl;\n  }\n\n  get lifeFrac () {\n    return this.elapsed / this.ttl;\n  }\n\n  buildProps (propObject) {\n    let fixedProps = {};\n    let dynamicProps = {};\n    Object.keys(propObject).map(propKey => {\n      let propValue = propObject[propKey];\n      if (Array.isArray(propValue)) {\n        if (propValue.length === 1){\n          // It's a one-element array, so it's still fixed\n          fixedProps[propKey] = propValue;\n        } else {\n          // dynamic property; calculate function for it\n          dynamicProps[propKey] = propValueToFunction(propValue);\n        }\n      } else if (typeof styleValue === 'object') {\n        // Not implemented yet, but I guess per-property easing one day (>.<)\n      } else {\n        // Either a fixed value or a getter, either way, just assign it\n        fixedProps[propKey] = propValue;\n      }\n    });\n\n    this.dynamicProps = {...this.dynamicProps, ...dynamicProps};\n    this.fixedProps = {...this.fixedProps, ...fixedProps};\n  }\n\n  setContents (html) {\n    this.element.innerHTML = html;\n  }\n\n  setText (text) {\n    this.element.innerText = text;\n  }\n\n  setStyleText (text) {\n      this.element.style.cssText = text;\n  }\n\n  updateStyle(obj){\n    this.style = {...this.style, ...obj};\n    this.buildProps(obj);\n  }\n\n  getSnapshot () {\n    let snapshot = Object.keys(this.dynamicProps)\n      .reduce((a, b) => ({\n        ...a,\n        [b]: this.dynamicProps[b](this.lifeFrac)\n      }), {...this.fixedProps});\n\n    return {...snapshot, transform: this.getScaledTransform(snapshot) }\n  }\n\n  getScaledTransform(snapshot) {\n    let { rotation, scale, scaleX, scaleY, skew, skewX, skewY } = snapshot;\n    rotation = (this.heading && `${this.heading}rad`) || rotation || 0;\n    scale = scale || 1.0;\n    scaleX = scaleX || scale;\n    scaleY = scaleY || scale;\n    skew = skew || 0;\n    skewX = skewX || skew;\n    skewY = skewY || skew;\n\n    return this.getTransform(scaleX, scaleY, rotation, skewX, skewY);\n  }\n\n  getTransform (scaleX, scaleY, rotation, skewX, skewY) {\n    return `translate3d(${this.position.x}px, ${this.position.y}px, 0px) rotateZ(${rotation}) scale(${scaleX}, ${scaleY}) skew(${skewX}, ${skewY})`;\n  }\n\n  getGridTransform (scaleX, scaleY, rotation, skewX, skewY) {\n    let x = this.position.x - (this.position.x % this.grid);\n    let y = this.position.y - (this.position.y % this.grid);\n    return `translate3d(${x}px, ${y}px, 0px) rotateZ(${rotation}) scale(${scaleX}, ${scaleY}) skew(${skewX}, ${skewY})`;\n  }\n\n  update (f) {\n    // Housekeeping\n    this.elapsed += f * 1000;\n    // Standard motion update\n    this.velocity.x += this.acceleration.x * f;\n    this.velocity.y += this.acceleration.y * f;\n    this.position.x += this.velocity.x * f;\n    this.position.y += this.velocity.y * f;\n\n    // Get current props, call user onUpdate(), assign them\n    this.nextProps = this.getSnapshot();\n    this.onUpdate(this, f);\n    Object.assign(this.element.style, this.nextProps);\n\n    // Next frame\n    this.frameNumber ++;\n  }\n}","import { DEFAULT_PARTICLE_OPTIONS } from './text_particle';\n\nconst DEFAULT_EMITTER_OPTIONS = {\n  maxEmissions: false,\n  ttl: false,\n  emitEvery: 500,\n  heading: 0,\n  particleOptions: { ...DEFAULT_PARTICLE_OPTIONS },\n  onCreate: () => {},\n  onUpdate: () => {},\n  onDestroy: () => {},\n  MAX_EMIT_PER_STEP: 16, /* Prevent thundering herds on tab switch */\n}\n\nexport default class TextParticleEmitter {\n  constructor (options) {\n    options = options || {};\n\n    Object.assign(this, {\n      ...DEFAULT_EMITTER_OPTIONS,\n      ...options,\n      position: { ...{ x: 0, y: 0 }, ...options.position },\n      velocity: { ...{ x: 0, y: 0 }, ...options.velocity },\n      acceleration: { ...{ x: 0, y: 0 }, ...options.acceleration },\n    });\n\n    this.manager = options.manager;\n    this.elapsed = 0;\n    this.emitted = 0;\n    this.frameNumber = 0;\n\n    this.onCreate(this);\n  }\n\n  get alive () {\n    if (this.maxEmissions && this.emitted >= this.maxEmissions) {\n      return false;\n    }\n    if (this.ttl && this.totalElapsed >= this.ttl) {\n      return false;\n    }\n    return true;\n  }\n\n  update (f) {\n    // position update\n    this.velocity.x += this.acceleration.x * f;\n    this.velocity.y += this.acceleration.y * f;\n    this.position.x += this.velocity.x * f;\n    this.position.y += this.velocity.y * f;\n\n    // emission update\n    this.elapsed += 1000 * f;\n    this.totalElapsed += 1000 * f;\n\n    if (this.elapsed >= this.emitEvery) {\n      let toEmit = Math.floor(this.elapsed / this.emitEvery);\n      toEmit = Math.min(toEmit, this.MAX_EMIT_PER_STEP);\n\n      if (this.maxEmissions) { toEmit = Math.min(this.maxEmissions - this.emitted, toEmit); }\n      this.elapsed = 0;\n\n      for(let i = 0; i < toEmit; i++){\n        let p = { ...{ x: 0, y: 0 }, ...this.particleOptions.position };\n        let pp = { x: this.position.x + p.x, y: this.position.y + p.y }\n\n        let v = { ...{ x: 0, y: 0 }, ...this.particleOptions.velocity };\n        let v_angle = Math.atan2(v.y, v.x);\n        let v_magna = Math.sqrt((v.x * v.x) + (v.y * v.y));\n\n        let vv = {\n          x: v_magna * Math.cos(v_angle + this.heading),\n          y: v_magna * Math.sin(v_angle + this.heading)\n        }\n\n        this.manager.addParticle({ ...this.particleOptions, position: pp, velocity: vv });\n        // emit particle\n        this.emitted ++;\n      }\n\n      this.frameNumber ++;\n    }\n\n    // user-provided update\n    this.onUpdate(this, f);\n  }\n}","import TextParticle from './text_particle';\nimport TextParticleEmitter from './text_particle_emitter';\n\nconst DEFAULT_TPM_OPTIONS = {\n  max: 100,\n  preallocate: 10,\n  tagName: 'span',\n  autostart: true,\n};\n\nexport default class TextParticleManager {\n  constructor (options) {\n    Object.assign(this, { ...DEFAULT_TPM_OPTIONS, ...options });\n\n    this.container = this.container || document.querySelector('body');\n    this.container.style.position = 'relative';\n\n    this._pool = [];\n    this._particles = [];\n    this._emitters = [];\n\n    this.foldElement = document.createElement('div');\n    this.foldElement.className = 'text-particle-manager-reservoir';\n    this.foldElement.style.cssText = `position: absolute; width: 0; height: 0; top: 0; left: 0`;\n    this.reservoirCSS = `position: absolute; display: none; pointer-events: none; white-space: pre-wrap; transform: translate3d(0px, 0px, 0px); box-sizing: border-box;`\n\n    this._allocate(this.preallocate);\n    this.container.appendChild(this.foldElement);\n\n    this.frameStart = null;\n  }\n\n  addParticle (options) {\n    if (this._particles.length < this.max) {\n\n      let p = new TextParticle({...options, element: this._pop()});\n\n      this._particles.push(p);\n\n      if (!this.raf && this.autostart) {\n        this.start();\n      }\n      return p;\n    }\n  }\n\n  addEmitter (options) {\n    let e = new TextParticleEmitter({...options, manager: this})\n    this._emitters.push(e);\n    if (!this.raf && this.autostart){\n      this.start();\n    }\n    return e;\n  }\n\n  start () {\n    this.frameStart = performance.now();\n    this.raf = requestAnimationFrame(() => this._update(this.frameStart));\n  }\n\n  reset () {\n    if (this.raf) { cancelAnimationFrame(this.raf) }\n    this._particles.map(p => {\n      p.setContents('');\n      p.setStyleText(this.reservoirCSS);\n\n      this._push(p.element);\n    });\n    this._particles = [];\n\n    this._emitters.map(e => e.onDestroy(e));\n    this._emitters = [];\n  }\n\n  clearEmitters () {\n    this._emitters.map(e => e.onDestroy(e));\n    this._emitters = [];\n  }\n\n  _update(timestamp) {\n    let dt = timestamp - this.frameStart;\n    this.frameStart = timestamp;\n    let f = (dt/1000);\n\n    let particlesToDestroy = [];\n    this._particles = this._particles.filter(p => {\n      p.update(f);\n      if (!p.alive) { particlesToDestroy.push(p) }\n      return p.alive;\n    });\n\n    particlesToDestroy.map(p => {\n      // reset styles and return to pool\n      p.onDestroy(p);\n      p.setContents('');\n      p.setStyleText(this.reservoirCSS);\n\n      this._push(p.element);\n    });\n\n    let emittersToDestroy = [];\n    this._emitters = this._emitters.filter(e => {\n      e.update(f);\n      if (!e.alive) { emittersToDestroy.push(e); }\n      return e.alive;\n    });\n\n    emittersToDestroy.map(e => e.onDestroy(e));\n\n    if (this._emitters.length === 0 && this._particles.length === 0){\n      cancelAnimationFrame(this.raf);\n      this.raf = false;\n    } else {\n      requestAnimationFrame((t) => this._update(t));\n    }\n  }\n\n  _push (el) {\n    this._pool.push(el);\n  }\n\n  _pop (el) {\n    if (this._pool.length > 0){\n      return this._pool.pop();\n    } else {\n      return this._create();\n    }\n  }\n\n  _create () {\n    let element = document.createElement(this.tagName);\n    element.style.cssText = this.reservoirCSS;\n    this.foldElement.appendChild(element);\n    return element;\n  }\n\n  _allocate (n) {\n    if (this._pool.length < n){\n      for(let i = this._pool.length; i < n; i++){\n        this._push(this._create());\n      }\n    }\n  }\n\n}","import TextParticleManager from './text_particle_manager';\nimport * as utilities from './utilities';\n\nTextParticleManager.utilities = utilities;\n\nmodule.exports = TextParticleManager;"]}